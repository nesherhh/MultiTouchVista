//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Service.Tests.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IApplicationInterface", CallbackContract=typeof(Multitouch.Service.Tests.Services.IApplicationInterfaceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IApplicationInterface {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/CreateSession")]
        void CreateSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IApplicationInterface/RemoveSession")]
        void RemoveSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/AddWindowHandleToSession")]
        void AddWindowHandleToSession(System.IntPtr windowHandle);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/RemoveWindowHandleFromSession")]
        void RemoveWindowHandleFromSession(System.IntPtr windowHandle);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/SendEmptyFrames")]
        void SendEmptyFrames(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationInterface/SendImageType", ReplyAction="http://tempuri.org/IApplicationInterface/SendImageTypeResponse")]
        bool SendImageType(Multitouch.Contracts.ImageType imageType, bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IApplicationInterfaceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/Frame")]
        void Frame(Multitouch.Service.Logic.ExternalInterfaces.FrameData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IApplicationInterfaceChannel : Multitouch.Service.Tests.Services.IApplicationInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ApplicationInterfaceClient : System.ServiceModel.DuplexClientBase<Multitouch.Service.Tests.Services.IApplicationInterface>, Multitouch.Service.Tests.Services.IApplicationInterface {
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateSession() {
            base.Channel.CreateSession();
        }
        
        public void RemoveSession() {
            base.Channel.RemoveSession();
        }
        
        public void AddWindowHandleToSession(System.IntPtr windowHandle) {
            base.Channel.AddWindowHandleToSession(windowHandle);
        }
        
        public void RemoveWindowHandleFromSession(System.IntPtr windowHandle) {
            base.Channel.RemoveWindowHandleFromSession(windowHandle);
        }
        
        public void SendEmptyFrames(bool value) {
            base.Channel.SendEmptyFrames(value);
        }
        
        public bool SendImageType(Multitouch.Contracts.ImageType imageType, bool value) {
            return base.Channel.SendImageType(imageType, value);
        }
    }
}
