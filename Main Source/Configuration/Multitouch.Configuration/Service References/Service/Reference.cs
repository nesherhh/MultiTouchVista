//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Configuration.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputProviderToken", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    internal partial class InputProviderToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AddInFullNameField;
        
        private string AssemblyNameField;
        
        private string DescriptionField;
        
        private string NameField;
        
        private string PublisherField;
        
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string AddInFullName {
            get {
                return this.AddInFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AddInFullNameField, value) != true)) {
                    this.AddInFullNameField = value;
                    this.RaisePropertyChanged("AddInFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string Publisher {
            get {
                return this.PublisherField;
            }
            set {
                if ((object.ReferenceEquals(this.PublisherField, value) != true)) {
                    this.PublisherField = value;
                    this.RaisePropertyChanged("Publisher");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IConfigurationInterface")]
    internal interface IConfigurationInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationInterface/GetAvailableInputProviders", ReplyAction="http://tempuri.org/IConfigurationInterface/GetAvailableInputProvidersResponse")]
        Multitouch.Configuration.Service.InputProviderToken[] GetAvailableInputProviders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationInterface/SetCurrentInputProvider", ReplyAction="http://tempuri.org/IConfigurationInterface/SetCurrentInputProviderResponse")]
        void SetCurrentInputProvider(Multitouch.Configuration.Service.InputProviderToken value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationInterface/GetCurrentInputProvider", ReplyAction="http://tempuri.org/IConfigurationInterface/GetCurrentInputProviderResponse")]
        Multitouch.Configuration.Service.InputProviderToken GetCurrentInputProvider();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConfigurationInterface/RestartService", ReplyAction="http://tempuri.org/IConfigurationInterface/RestartServiceResponse")]
        void RestartService();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal interface IConfigurationInterfaceChannel : Multitouch.Configuration.Service.IConfigurationInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal partial class ConfigurationInterfaceClient : System.ServiceModel.ClientBase<Multitouch.Configuration.Service.IConfigurationInterface>, Multitouch.Configuration.Service.IConfigurationInterface {
        
        public ConfigurationInterfaceClient() {
        }
        
        public ConfigurationInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConfigurationInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConfigurationInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConfigurationInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Multitouch.Configuration.Service.InputProviderToken[] GetAvailableInputProviders() {
            return base.Channel.GetAvailableInputProviders();
        }
        
        public void SetCurrentInputProvider(Multitouch.Configuration.Service.InputProviderToken value) {
            base.Channel.SetCurrentInputProvider(value);
        }
        
        public Multitouch.Configuration.Service.InputProviderToken GetCurrentInputProvider() {
            return base.Channel.GetCurrentInputProvider();
        }
        
        public void RestartService() {
            base.Channel.RestartService();
        }
    }
}
