//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3069
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Contracts.HostSideAdapters
{
    
    public class IProviderViewToContractHostAdapter : System.AddIn.Pipeline.ContractBase, Multitouch.Contracts.Contracts.IProviderContract
    {
        private Multitouch.Contracts.IProvider _view;
        private System.Collections.Generic.Dictionary<Multitouch.Contracts.Contracts.IInputEventHandlerContract, System.EventHandler<Multitouch.Contracts.InputDataEventArgs>> Input_handlers;
        public IProviderViewToContractHostAdapter(Multitouch.Contracts.IProvider view)
        {
            _view = view;
            Input_handlers = new System.Collections.Generic.Dictionary<Multitouch.Contracts.Contracts.IInputEventHandlerContract, System.EventHandler<Multitouch.Contracts.InputDataEventArgs>>();
        }
        public bool IsRunning
        {
            get
            {
                return _view.IsRunning;
            }
        }
        public bool HasConfiguration
        {
            get
            {
                return _view.HasConfiguration;
            }
        }
        public virtual void Start()
        {
            _view.Start();
        }
        public virtual void Stop()
        {
            _view.Stop();
        }
        public virtual System.Windows.UIElement GetConfiguration()
        {
            return _view.GetConfiguration();
        }
        public virtual bool SendImageType(Multitouch.Contracts.Contracts.ImageType imageType, bool value)
        {
            return _view.SendImageType(Multitouch.Contracts.HostSideAdapters.ImageTypeHostAdapter.ContractToViewAdapter(imageType), value);
        }
        public virtual void InputAdd(Multitouch.Contracts.Contracts.IInputEventHandlerContract handler)
        {
            System.EventHandler<Multitouch.Contracts.InputDataEventArgs> adaptedHandler = new System.EventHandler<Multitouch.Contracts.InputDataEventArgs>(new Multitouch.Contracts.HostSideAdapters.IInputEventHandlerContractToViewHostAdapter(handler).Handler);
            _view.Input += adaptedHandler;
            Input_handlers[handler] = adaptedHandler;
        }
        public virtual void InputRemove(Multitouch.Contracts.Contracts.IInputEventHandlerContract handler)
        {
            System.EventHandler<Multitouch.Contracts.InputDataEventArgs> adaptedHandler;
            if (Input_handlers.TryGetValue(handler, out adaptedHandler))
            {
                Input_handlers.Remove(handler);
                _view.Input -= adaptedHandler;
            }
        }
        internal Multitouch.Contracts.IProvider GetSourceView()
        {
            return _view;
        }
    }
}

