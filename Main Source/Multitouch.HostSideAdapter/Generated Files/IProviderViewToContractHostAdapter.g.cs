//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Contracts.HostSideAdapters
{
    
    public class IProviderViewToContractHostAdapter : System.AddIn.Pipeline.ContractBase, Multitouch.Contracts.Contracts.IProviderContract
    {
        private Multitouch.Contracts.IProvider _view;
        private System.Collections.Generic.Dictionary<Multitouch.Contracts.Contracts.IContactChangedEventHandlerContract, System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs>> ContactChanged_handlers;
        public IProviderViewToContractHostAdapter(Multitouch.Contracts.IProvider view)
        {
            _view = view;
            ContactChanged_handlers = new System.Collections.Generic.Dictionary<Multitouch.Contracts.Contracts.IContactChangedEventHandlerContract, System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs>>();
        }
        public bool IsRunning
        {
            get
            {
                return _view.IsRunning;
            }
        }
        public virtual void Start()
        {
            _view.Start();
        }
        public virtual void Stop()
        {
            _view.Stop();
        }
        public virtual void ContactChangedAdd(Multitouch.Contracts.Contracts.IContactChangedEventHandlerContract handler)
        {
            System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs> adaptedHandler = new System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs>(new Multitouch.Contracts.HostSideAdapters.IContactChangedEventHandlerContractToViewHostAdapter(handler).Handler);
            _view.ContactChanged += adaptedHandler;
            ContactChanged_handlers[handler] = adaptedHandler;
        }
        public virtual void ContactChangedRemove(Multitouch.Contracts.Contracts.IContactChangedEventHandlerContract handler)
        {
            System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs> adaptedHandler;
            if (ContactChanged_handlers.TryGetValue(handler, out adaptedHandler))
            {
                ContactChanged_handlers.Remove(handler);
                _view.ContactChanged -= adaptedHandler;
            }
        }
        internal Multitouch.Contracts.IProvider GetSourceView()
        {
            return _view;
        }
    }
}

