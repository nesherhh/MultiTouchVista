//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3069
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Framework.Input.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageType", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Contracts")]
    internal enum ImageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normalized = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rect", Namespace="http://schemas.datacontract.org/2004/07/System.Windows")]
    [System.SerializableAttribute()]
    internal partial struct Rect : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double _heightField;
        
        private double _widthField;
        
        private double _xField;
        
        private double _yField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal double _height {
            get {
                return this._heightField;
            }
            set {
                if ((this._heightField.Equals(value) != true)) {
                    this._heightField = value;
                    this.RaisePropertyChanged("_height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal double _width {
            get {
                return this._widthField;
            }
            set {
                if ((this._widthField.Equals(value) != true)) {
                    this._widthField = value;
                    this.RaisePropertyChanged("_width");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal double _x {
            get {
                return this._xField;
            }
            set {
                if ((this._xField.Equals(value) != true)) {
                    this._xField = value;
                    this.RaisePropertyChanged("_x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        internal double _y {
            get {
                return this._yField;
            }
            set {
                if ((this._yField.Equals(value) != true)) {
                    this._yField = value;
                    this.RaisePropertyChanged("_y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactState", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Contracts")]
    internal enum ContactState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Removed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Moved = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrameData", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    internal partial class FrameData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Framework.Input.Service.ImageData[] ImagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Multitouch.Framework.Input.Service.ImageData[] Images {
            get {
                return this.ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagesField, value) != true)) {
                    this.ImagesField = value;
                    this.RaisePropertyChanged("Images");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageData", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    internal partial class ImageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitsPerPixelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StrideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Framework.Input.Service.ImageType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int BitsPerPixel {
            get {
                return this.BitsPerPixelField;
            }
            set {
                if ((this.BitsPerPixelField.Equals(value) != true)) {
                    this.BitsPerPixelField = value;
                    this.RaisePropertyChanged("BitsPerPixel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Stride {
            get {
                return this.StrideField;
            }
            set {
                if ((this.StrideField.Equals(value) != true)) {
                    this.StrideField = value;
                    this.RaisePropertyChanged("Stride");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Multitouch.Framework.Input.Service.ImageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Input.Service.IApplicationInterface", CallbackContract=typeof(Multitouch.Framework.Input.Service.IApplicationInterfaceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    internal interface IApplicationInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationInterface/Subscribe", ReplyAction="http://tempuri.org/IApplicationInterface/SubscribeResponse")]
        void Subscribe(System.IntPtr windowHandle);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/IApplicationInterface/Unsubscribe", ReplyAction="http://tempuri.org/IApplicationInterface/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/ReceiveFrames")]
        void ReceiveFrames(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationInterface/SendImageType", ReplyAction="http://tempuri.org/IApplicationInterface/SendImageTypeResponse")]
        bool SendImageType(Multitouch.Framework.Input.Service.ImageType imageType, bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal interface IApplicationInterfaceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/ContactChanged")]
        void ContactChanged(int id, double x, double y, double width, double height, double angle, Multitouch.Framework.Input.Service.Rect bounds, Multitouch.Framework.Input.Service.ContactState state);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/Frame")]
        void Frame(Multitouch.Framework.Input.Service.FrameData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal interface IApplicationInterfaceChannel : Multitouch.Framework.Input.Service.IApplicationInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    internal partial class ApplicationInterfaceClient : System.ServiceModel.DuplexClientBase<Multitouch.Framework.Input.Service.IApplicationInterface>, Multitouch.Framework.Input.Service.IApplicationInterface {
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(System.IntPtr windowHandle) {
            base.Channel.Subscribe(windowHandle);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public void ReceiveFrames(bool value) {
            base.Channel.ReceiveFrames(value);
        }
        
        public bool SendImageType(Multitouch.Framework.Input.Service.ImageType imageType, bool value) {
            return base.Channel.SendImageType(imageType, value);
        }
    }
}
