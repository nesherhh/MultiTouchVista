//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Contracts.AddInSideAdapters
{
    
    public class IProviderContractToViewAddInAdapter : Multitouch.Contracts.IProvider
    {
        private Multitouch.Contracts.Contracts.IProviderContract _contract;
        private System.AddIn.Pipeline.ContractHandle _handle;
        private Multitouch.Contracts.AddInSideAdapters.IContactChangedEventHandlerViewToContractAddInAdapter ContactChanged_Handler;
        private static System.Reflection.MethodInfo s_ContactChangedAddFire;
		public event System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs>ContactChanged{
			add{
				if (_ContactChanged == null)
				{
					_contract.ContactChangedAdd(ContactChanged_Handler);
				}
				_ContactChanged += value;
				}
			remove{
					_ContactChanged -= value;
				if (_ContactChanged == null)
				{
					_contract.ContactChangedRemove(ContactChanged_Handler);
				}
				}
		}
        static IProviderContractToViewAddInAdapter()
        {
            s_ContactChangedAddFire = typeof(IProviderContractToViewAddInAdapter).GetMethod("Fire_ContactChanged", ((System.Reflection.BindingFlags)(36)));
        }
        public IProviderContractToViewAddInAdapter(Multitouch.Contracts.Contracts.IProviderContract contract)
        {
            _contract = contract;
            _handle = new System.AddIn.Pipeline.ContractHandle(contract);
            ContactChanged_Handler = new Multitouch.Contracts.AddInSideAdapters.IContactChangedEventHandlerViewToContractAddInAdapter(this, s_ContactChangedAddFire);
        }
        public bool IsRunning
        {
            get
            {
                return _contract.IsRunning;
            }
        }
        private event System.EventHandler<Multitouch.Contracts.ContactChangedEventArgs> _ContactChanged;
        public void Start()
        {
            _contract.Start();
        }
        public void Stop()
        {
            _contract.Stop();
        }
        internal virtual void Fire_ContactChanged(Multitouch.Contracts.ContactChangedEventArgs args)
        {
            if ((_ContactChanged == null))
            {
            }
            else
            {
                _ContactChanged.Invoke(this, args);
            }
        }
        internal Multitouch.Contracts.Contracts.IProviderContract GetSourceContract()
        {
            return _contract;
        }
    }
}

